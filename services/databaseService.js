import Datastore from 'nedb-promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class DatabaseService {
    constructor() {
        const dataDir = path.join(__dirname, '../data');

        // Banco principal para estudos de caso completos
        this.estudosCasosDb = Datastore.create(path.join(dataDir, 'estudos_casos.db'));

        // Banco para sess√µes b√°sicas (manter para compatibilidade)
        this.db = Datastore.create(path.join(dataDir, 'sessions.db'));
    }

    // ====================================
    // M√âTODOS PRINCIPAIS (estudos_casos.db)
    // ====================================

    /**
     * Criar nova sess√£o completa (usado no initChat)
     */
    async criarSessao(sessionId, dados) {
        try {
            console.log('üöÄ Criando nova sess√£o:', sessionId);

            const documento = {
                sessionId,
                nome_aluno: dados.nome_aluno || dados["nome do aluno"] || "Usu√°rio An√¥nimo",
                estudo_de_caso: dados.estudo_de_caso || dados["estudo de caso"] || "",
                especialidade: dados.especialidade || "",
                historico: [], // Sempre inicia vazio
                feedback_final: null,
                tokens_utilizados: Number(dados.tokens_utilizados) || 0,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                status: "ativo"
            };

            const resultado = await this.estudosCasosDb.insert(documento);
            console.log('‚úÖ Sess√£o criada:', sessionId);

            return resultado;
        } catch (error) {
            console.error('‚ùå Erro ao criar sess√£o:', error);
            throw new Error(`Falha ao criar sess√£o: ${error.message}`);
        }
    }

    /**
     * Obter sess√£o completa (sem valida√ß√µes que quebram o fluxo)
     */
    async obterSessao(sessionId) {
        try {
            if (!sessionId || typeof sessionId !== 'string') {
                throw new Error('SessionId inv√°lido');
            }

            const resultado = await this.estudosCasosDb.findOne({
                sessionId,
                status: "ativo"
            });

            if (!resultado) {
                return null; // N√£o lan√ßar erro, deixar caller decidir
            }

            // Normalizar campos para uso interno
            return {
                ...resultado,
                estudo_de_caso: resultado.estudo_de_caso || resultado["estudo de caso"] || "",
                nome_aluno: resultado.nome_aluno || resultado["nome do aluno"] || "Usu√°rio An√¥nimo",
                historico: Array.isArray(resultado.historico) ? resultado.historico : []
            };

        } catch (error) {
            console.error('‚ùå Erro ao obter sess√£o:', error);
            return null;
        }
    }

    /**
     * Adicionar novo registro ao hist√≥rico (usado no gerarPergunta)
     */
    async adicionarPerguntaHistorico(sessionId, pergunta, tokensUsados = 0) {
        try {
            console.log('üìù Adicionando pergunta ao hist√≥rico:', sessionId);

            const sessao = await this.obterSessao(sessionId);
            if (!sessao) {
                throw new Error(`Sess√£o n√£o encontrada: ${sessionId}`);
            }

            const novoRegistro = {
                pergunta: String(pergunta).trim(),
                resposta: null,
                feedback: null,
                created_at: new Date().toISOString()
            };

            const historicoAtualizado = [...sessao.historico, novoRegistro];

            await this._atualizarCampos(sessionId, {
                historico: historicoAtualizado,
                tokens_utilizados: (sessao.tokens_utilizados || 0) + tokensUsados
            });

            console.log('‚úÖ Pergunta adicionada:', sessionId);
            return historicoAtualizado;

        } catch (error) {
            console.error('‚ùå Erro ao adicionar pergunta:', error);
            throw error;
        }
    }

    /**
     * Atualizar √∫ltimo registro com resposta e feedback (usado no correcaoResposta)
     */
    async atualizarUltimoRegistro(sessionId, resposta, feedback, tokensUsados = 0) {
        try {
            console.log('üí¨ Atualizando √∫ltimo registro:', sessionId);

            const sessao = await this.obterSessao(sessionId);
            if (!sessao) {
                throw new Error(`Sess√£o n√£o encontrada: ${sessionId}`);
            }

            if (sessao.historico.length === 0) {
                throw new Error('Nenhuma pergunta encontrada no hist√≥rico');
            }

            const historico = [...sessao.historico];
            const ultimoIdx = historico.length - 1;

            // Atualizar apenas campos fornecidos
            historico[ultimoIdx] = {
                ...historico[ultimoIdx],
                ...(resposta && { resposta: String(resposta).trim() }),
                ...(feedback && { feedback: String(feedback).trim() }),
                updated_at: new Date().toISOString()
            };

            await this._atualizarCampos(sessionId, {
                historico,
                tokens_utilizados: (sessao.tokens_utilizados || 0) + tokensUsados
            });

            console.log('‚úÖ √öltimo registro atualizado:', sessionId);
            return historico;

        } catch (error) {
            console.error('‚ùå Erro ao atualizar √∫ltimo registro:', error);
            throw error;
        }
    }

    /**
   * Atualizar feedback final da sess√£o (usado no gerarFeedbackFinal)
   */
    async atualizarFeedbackFinal(sessionId, feedbackFinal, tokensUsados = 0) {
        try {
            console.log('üìù Atualizando feedback final:', sessionId);

            const sessao = await this.obterSessao(sessionId);
            if (!sessao) {
                throw new Error(`Sess√£o n√£o encontrada: ${sessionId}`);
            }

            // ‚úÖ VERIFICA√á√ÉO: Confirmar que hist√≥rico n√£o ser√° alterado
            const historicoOriginal = [...(sessao.historico || [])];

            console.log('üìä Estado antes da atualiza√ß√£o:', {
                sessionId,
                historicoLength: historicoOriginal.length,
                feedbackAtual: sessao.feedback_final ? 'EXISTS' : 'NULL',
                novoFeedbackLength: String(feedbackFinal).length
            });

            // ‚úÖ ATUALIZA√á√ÉO ISOLADA: Somente feedback_final e tokens
            const camposParaAtualizar = {
                feedback_final: String(feedbackFinal).trim(),
                tokens_utilizados: (sessao.tokens_utilizados || 0) + tokensUsados
            };

            // ‚úÖ LOG DE SEGURAN√áA: Confirmar que hist√≥rico n√£o est√° sendo tocado
            if (camposParaAtualizar.historico) {
                throw new Error('ERRO DE SEGURAN√áA: Tentativa de modificar hist√≥rico detectada!');
            }

            await this._atualizarCampos(sessionId, camposParaAtualizar);

            // ‚úÖ VERIFICA√á√ÉO P√ìS-ATUALIZA√á√ÉO: Confirmar integridade do hist√≥rico
            const sessaoAtualizada = await this.obterSessao(sessionId);
            const historicoDepois = [...(sessaoAtualizada.historico || [])];

            if (historicoOriginal.length !== historicoDepois.length) {
                console.error('üö® ALERTA: Tamanho do hist√≥rico mudou!', {
                    antes: historicoOriginal.length,
                    depois: historicoDepois.length
                });
            }

            console.log('‚úÖ Feedback final atualizado com sucesso:', {
                sessionId,
                historicoIntacto: historicoOriginal.length === historicoDepois.length,
                feedbackSalvo: Boolean(sessaoAtualizada.feedback_final),
                tamanhoFeedback: sessaoAtualizada.feedback_final?.length || 0
            });

            return {
                sucesso: true,
                feedbackSalvo: sessaoAtualizada.feedback_final,
                historicoIntacto: historicoOriginal.length === historicoDepois.length
            };
        } catch (error) {
            console.error('‚ùå Erro ao atualizar feedback geral:', error);
            throw error;
        }
    }


    /**
     * M√©todo interno para atualizar campos (opera√ß√£o at√¥mica)
     */
    async _atualizarCampos(sessionId, campos) {
        const dadosAtualizar = {
            ...campos,
            updated_at: new Date().toISOString()
        };

        return await this.estudosCasosDb.update(
            { sessionId, status: "ativo" },
            { $set: dadosAtualizar }
        );
    }

    /**
     * Obter estat√≠sticas da sess√£o
     */
    async obterEstatisticas(sessionId) {
        try {
            const sessao = await this.obterSessao(sessionId);
            if (!sessao) return null;

            const historicoValido = sessao.historico.filter(h => h.pergunta);
            const respostasCompletas = historicoValido.filter(h => h.resposta && h.feedback);

            return {
                sessionId,
                nome_aluno: sessao.nome_aluno,
                especialidade: sessao.especialidade,
                total_perguntas: historicoValido.length,
                respostas_completas: respostasCompletas.length,
                tem_feedback_final: Boolean(sessao.feedback_final), // ‚úÖ NOVO CAMPO
                tokens_utilizados: sessao.tokens_utilizados || 0,
                created_at: sessao.created_at,
                updated_at: sessao.updated_at
            };

        } catch (error) {
            console.error('‚ùå Erro ao obter estat√≠sticas:', error);
            return null;
        }
    }

    /**
     * Listar sess√µes ativas
     */
    async listarSessoes(limite = 10) {
        try {
            return await this.estudosCasosDb
                .find({ status: "ativo" })
                .sort({ updated_at: -1 })
                .limit(limite);
        } catch (error) {
            console.error('‚ùå Erro ao listar sess√µes:', error);
            return [];
        }
    }

    /**
     * Arquivar sess√£o
     */
    async arquivarSessao(sessionId) {
        try {
            await this._atualizarCampos(sessionId, { status: "arquivado" });
            console.log('üì¶ Sess√£o arquivada:', sessionId);
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao arquivar sess√£o:', error);
            return false;
        }
    }

    // ====================================
    // M√âTODOS DE COMPATIBILIDADE (DEPRECATED)
    // ====================================

    /**
     * @deprecated Use criarSessao()
     */
    async salvarSessaoCompleta(sessionId, dados) {
        console.warn('‚ö†Ô∏è salvarSessaoCompleta est√° deprecated, use criarSessao()');
        return await this.criarSessao(sessionId, dados);
    }

    /**
     * @deprecated Use obterSessao()
     */
    async obterSessaoCompleta(sessionId) {
        console.warn('‚ö†Ô∏è obterSessaoCompleta est√° deprecated, use obterSessao()');
        return await this.obterSessao(sessionId);
    }

    /**
     * @deprecated Use atualizarUltimoRegistro()
     */
    async atualizarUltimoRegistroHistorico(sessionId, partialEntry = {}) {
        console.warn('‚ö†Ô∏è atualizarUltimoRegistroHistorico est√° deprecated, use atualizarUltimoRegistro()');

        const { resposta, feedback, ...outros } = partialEntry;
        return await this.atualizarUltimoRegistro(
            sessionId,
            resposta,
            feedback,
            outros.tokens_utilizados || 0
        );
    }

    // ====================================
    // M√âTODOS DE DEBUG E MANUTEN√á√ÉO
    // ====================================

    /**
     * Debug simplificado
     */
    async debug() {
        try {
            const total = await this.estudosCasosDb.count({ status: "ativo" });
            const ultimaSessao = await this.estudosCasosDb
                .findOne({ status: "ativo" })
                .sort({ updated_at: -1 });

            console.log('üìä DATABASE DEBUG:');
            console.log(`   Total sess√µes ativas: ${total}`);

            if (ultimaSessao) {
                console.log(`   √öltima sess√£o: ${ultimaSessao.sessionId}`);
                console.log(`   Perguntas: ${ultimaSessao.historico?.length || 0}`);
                console.log(`   Tokens: ${ultimaSessao.tokens_utilizados || 0}`);
            }

        } catch (error) {
            console.error('‚ùå Erro no debug:', error);
        }
    }
}

export default new DatabaseService();